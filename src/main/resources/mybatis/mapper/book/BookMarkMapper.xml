<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="example.bootframe.mapper.book.BookMarkMapper" >
  <resultMap id="BaseResultMap" type="example.bootframe.entity.book.BookMark" >
    <id column="bm_id" property="bmId" jdbcType="INTEGER" />
    <result column="u_id" property="uId" jdbcType="INTEGER" />
    <result column="bs_id" property="bsId" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="BIGINT" />
    <result column="update_time" property="updateTime" jdbcType="BIGINT" />
    <result column="create_by" property="createBy" jdbcType="INTEGER" />
    <result column="update_by" property="updateBy" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="example.bootframe.entity.book.BookMarkWithBLOBs" extends="BaseResultMap" >
    <result column="pointer" property="pointer" jdbcType="VARBINARY" />
    <result column="url" property="url" jdbcType="VARBINARY" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    bm_id, u_id, bs_id, status, create_time, update_time, create_by, update_by
  </sql>
  <sql id="Blob_Column_List" >
    pointer, url
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="example.bootframe.entity.book.BookMarkExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from book_book_mark_t
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="example.bootframe.entity.book.BookMarkExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from book_book_mark_t
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from book_book_mark_t
    where bm_id = #{bmId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from book_book_mark_t
    where bm_id = #{bmId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="example.bootframe.entity.book.BookMarkExample" >
    delete from book_book_mark_t
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="example.bootframe.entity.book.BookMarkWithBLOBs" >
    insert into book_book_mark_t (bm_id, u_id, bs_id, 
      status, create_time, update_time, 
      create_by, update_by, pointer, 
      url)
    values (#{bmId,jdbcType=INTEGER}, #{uId,jdbcType=INTEGER}, #{bsId,jdbcType=INTEGER}, 
      #{status,jdbcType=INTEGER}, #{createTime,jdbcType=BIGINT}, #{updateTime,jdbcType=BIGINT}, 
      #{createBy,jdbcType=INTEGER}, #{updateBy,jdbcType=INTEGER}, #{pointer,jdbcType=VARBINARY}, 
      #{url,jdbcType=VARBINARY})
  </insert>
  <insert id="insertSelective" parameterType="example.bootframe.entity.book.BookMarkWithBLOBs" >
    insert into book_book_mark_t
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="bmId != null" >
        bm_id,
      </if>
      <if test="uId != null" >
        u_id,
      </if>
      <if test="bsId != null" >
        bs_id,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="createBy != null" >
        create_by,
      </if>
      <if test="updateBy != null" >
        update_by,
      </if>
      <if test="pointer != null" >
        pointer,
      </if>
      <if test="url != null" >
        url,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="bmId != null" >
        #{bmId,jdbcType=INTEGER},
      </if>
      <if test="uId != null" >
        #{uId,jdbcType=INTEGER},
      </if>
      <if test="bsId != null" >
        #{bsId,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=BIGINT},
      </if>
      <if test="createBy != null" >
        #{createBy,jdbcType=INTEGER},
      </if>
      <if test="updateBy != null" >
        #{updateBy,jdbcType=INTEGER},
      </if>
      <if test="pointer != null" >
        #{pointer,jdbcType=VARBINARY},
      </if>
      <if test="url != null" >
        #{url,jdbcType=VARBINARY},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="example.bootframe.entity.book.BookMarkExample" resultType="java.lang.Integer" >
    select count(*) from book_book_mark_t
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update book_book_mark_t
    <set >
      <if test="record.bmId != null" >
        bm_id = #{record.bmId,jdbcType=INTEGER},
      </if>
      <if test="record.uId != null" >
        u_id = #{record.uId,jdbcType=INTEGER},
      </if>
      <if test="record.bsId != null" >
        bs_id = #{record.bsId,jdbcType=INTEGER},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=BIGINT},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=BIGINT},
      </if>
      <if test="record.createBy != null" >
        create_by = #{record.createBy,jdbcType=INTEGER},
      </if>
      <if test="record.updateBy != null" >
        update_by = #{record.updateBy,jdbcType=INTEGER},
      </if>
      <if test="record.pointer != null" >
        pointer = #{record.pointer,jdbcType=VARBINARY},
      </if>
      <if test="record.url != null" >
        url = #{record.url,jdbcType=VARBINARY},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update book_book_mark_t
    set bm_id = #{record.bmId,jdbcType=INTEGER},
      u_id = #{record.uId,jdbcType=INTEGER},
      bs_id = #{record.bsId,jdbcType=INTEGER},
      status = #{record.status,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=BIGINT},
      update_time = #{record.updateTime,jdbcType=BIGINT},
      create_by = #{record.createBy,jdbcType=INTEGER},
      update_by = #{record.updateBy,jdbcType=INTEGER},
      pointer = #{record.pointer,jdbcType=VARBINARY},
      url = #{record.url,jdbcType=VARBINARY}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update book_book_mark_t
    set bm_id = #{record.bmId,jdbcType=INTEGER},
      u_id = #{record.uId,jdbcType=INTEGER},
      bs_id = #{record.bsId,jdbcType=INTEGER},
      status = #{record.status,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=BIGINT},
      update_time = #{record.updateTime,jdbcType=BIGINT},
      create_by = #{record.createBy,jdbcType=INTEGER},
      update_by = #{record.updateBy,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="example.bootframe.entity.book.BookMarkWithBLOBs" >
    update book_book_mark_t
    <set >
      <if test="uId != null" >
        u_id = #{uId,jdbcType=INTEGER},
      </if>
      <if test="bsId != null" >
        bs_id = #{bsId,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=BIGINT},
      </if>
      <if test="createBy != null" >
        create_by = #{createBy,jdbcType=INTEGER},
      </if>
      <if test="updateBy != null" >
        update_by = #{updateBy,jdbcType=INTEGER},
      </if>
      <if test="pointer != null" >
        pointer = #{pointer,jdbcType=VARBINARY},
      </if>
      <if test="url != null" >
        url = #{url,jdbcType=VARBINARY},
      </if>
    </set>
    where bm_id = #{bmId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="example.bootframe.entity.book.BookMarkWithBLOBs" >
    update book_book_mark_t
    set u_id = #{uId,jdbcType=INTEGER},
      bs_id = #{bsId,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=BIGINT},
      update_time = #{updateTime,jdbcType=BIGINT},
      create_by = #{createBy,jdbcType=INTEGER},
      update_by = #{updateBy,jdbcType=INTEGER},
      pointer = #{pointer,jdbcType=VARBINARY},
      url = #{url,jdbcType=VARBINARY}
    where bm_id = #{bmId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="example.bootframe.entity.book.BookMark" >
    update book_book_mark_t
    set u_id = #{uId,jdbcType=INTEGER},
      bs_id = #{bsId,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=BIGINT},
      update_time = #{updateTime,jdbcType=BIGINT},
      create_by = #{createBy,jdbcType=INTEGER},
      update_by = #{updateBy,jdbcType=INTEGER}
    where bm_id = #{bmId,jdbcType=INTEGER}
  </update>
</mapper>